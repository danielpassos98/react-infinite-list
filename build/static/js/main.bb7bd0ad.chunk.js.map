{"version":3,"sources":["InfiniteList.jsx","mock_data.js","App.jsx","index.jsx"],"names":["InfiniteList","_ref","rows","fetchData","limit","containerClasses","containerStyle","fetchThreshold","children","_useState","useState","_useState2","Object","slicedToArray","offset","setOffset","viewRef","useRef","_useState3","Map","_useState4","refs","setRefs","fetchTh","isScrolledIntoView","elem","view","viewRect","getBoundingClientRect","elemRect","top","height","useEffect","length","react_default","a","createElement","ref","onScroll","i","size","get","current","className","style","width","maxHeight","overflowY","marginTop","marginLeft","marginRight","map","row","index","key","c","set","mock_fetch","Promise","resolve","name","MOCK_DATA","App","props","setRows","src_InfiniteList","then","data","concat","toConsumableArray","ReactDOM","render","src_App","document","getElementById"],"mappings":"kJAmEeA,EAjEM,SAAAC,GAQf,IAPJC,EAOID,EAPJC,KACAC,EAMIF,EANJE,UACAC,EAKIH,EALJG,MACAC,EAIIJ,EAJJI,iBACAC,EAGIL,EAHJK,eACAC,EAEIN,EAFJM,eACAC,EACIP,EADJO,SACIC,EACwBC,mBAAS,GADjCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACGK,EADHH,EAAA,GACWI,EADXJ,EAAA,GAEEK,EAAUC,iBAAO,MAFnBC,EAGoBR,mBAAS,IAAIS,KAHjCC,EAAAR,OAAAC,EAAA,EAAAD,CAAAM,EAAA,GAGGG,EAHHD,EAAA,GAGSE,EAHTF,EAAA,GAIEG,EAAUhB,GAAkC,EAW5CiB,EAAqB,SAACC,EAAMC,GAChC,IAAMC,EAAWD,EAAKE,wBAChBC,EAAWJ,EAAKG,wBAEtB,OACEC,EAASC,IAAMD,EAASE,QAAUJ,EAASG,KAC3CD,EAASC,IAAMH,EAASG,IAAMH,EAASI,QAS3C,OALAC,oBAAU,WACY,IAAhB9B,EAAK+B,QAAc9B,EAAUW,EAAQV,GACzCW,EAAUb,EAAK+B,SACd,CAAC/B,IAGFgC,EAAAC,EAAAC,cAAA,OACEC,IAAKrB,EACLsB,SAAU,WACR,IACE,IAAIC,EAAIlB,EAAKmB,KAAOjB,EAAU,EAAI,EAAIF,EAAKmB,KAAOjB,EAClDgB,EAAIlB,EAAKmB,KACTD,IAEA,GAAIf,EAAmBH,EAAKoB,IAAIF,GAAIvB,EAAQ0B,SAAU,CACpDvC,EAAUW,EAAQV,GAClB,QAINuC,UAAWtC,EACXuC,MAAOtC,GAxCU,CACnBuC,MAAO,QACPC,UAAW,QACXC,UAAW,SACXC,UAAW,QACXC,WAAY,OACZC,YAAa,SAoCVhD,EAAKiD,IAAI,SAACC,EAAKC,GAAN,OACRnB,EAAAC,EAAAC,cAAA,OAAKkB,IAAKD,EAAOhB,IAAK,SAAAkB,GAAC,OAAIjC,EAAQD,EAAKmC,IAAIH,EAAOE,MAChD/C,EAAS4C,QC/CLK,EAJW,SAAC3C,EAAQV,GACjC,OAAOsD,QAAQC,QAVC,SAAC7C,EAAQV,GAAT,MAAmB,CACnC,CAAEwD,KAAM,UAAY9C,EAAS,WAAaV,GAC1C,CAAEwD,KAAM,UAAY9C,EAAS,WAAaV,GAC1C,CAAEwD,KAAM,UAAY9C,EAAS,WAAaV,GAC1C,CAAEwD,KAAM,UAAY9C,EAAS,WAAaV,GAC1C,CAAEwD,KAAM,UAAY9C,EAAS,WAAaV,GAC1C,CAAEwD,KAAM,UAAY9C,EAAS,WAAaV,IAInByD,CAAU/C,EAAQV,KCW5B0D,EAjBH,SAAAC,GAAS,IAAAtD,EACKC,mBAAS,IADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZP,EADYS,EAAA,GACNqD,EADMrD,EAAA,GAQnB,OACEuB,EAAAC,EAAAC,cAAC6B,EAAD,CAAc/D,KAAMA,EAAMC,UANV,SAACW,EAAQV,GAAT,OAChBqD,EAAW3C,EAAQV,GAAO8D,KAAK,SAAAC,GAC7BH,EAAO,GAAAI,OAAAxD,OAAAyD,EAAA,EAAAzD,CAAKV,GAALU,OAAAyD,EAAA,EAAAzD,CAAcuD,QAIyB/D,MAAO,IACpD,SAAAgD,GAAG,OAAIlB,EAAAC,EAAAC,cAAA,WACLgB,EAAIQ,SCXbU,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.bb7bd0ad.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\n\nconst InfiniteList = ({\n  rows,\n  fetchData,\n  limit,\n  containerClasses,\n  containerStyle,\n  fetchThreshold,\n  children\n}) => {\n  const [offset, setOffset] = useState(0);\n  const viewRef = useRef(null);\n  const [refs, setRefs] = useState(new Map());\n  const fetchTh = fetchThreshold ? fetchThreshold : 5;\n\n  const defaultStyle = {\n    width: \"200px\",\n    maxHeight: \"100px\",\n    overflowY: \"scroll\",\n    marginTop: \"100px\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  };\n\n  const isScrolledIntoView = (elem, view) => {\n    const viewRect = view.getBoundingClientRect();\n    const elemRect = elem.getBoundingClientRect();\n\n    return (\n      elemRect.top + elemRect.height >= viewRect.top &&\n      elemRect.top < viewRect.top + viewRect.height\n    );\n  };\n\n  useEffect(() => {\n    if (rows.length === 0) fetchData(offset, limit);\n    setOffset(rows.length);\n  }, [rows]);\n\n  return (\n    <div\n      ref={viewRef}\n      onScroll={() => {\n        for (\n          let i = refs.size - fetchTh < 0 ? 0 : refs.size - fetchTh;\n          i < refs.size;\n          i++\n        ) {\n          if (isScrolledIntoView(refs.get(i), viewRef.current)) {\n            fetchData(offset, limit);\n            break;\n          }\n        }\n      }}\n      className={containerClasses}\n      style={containerStyle ? containerStyle : defaultStyle}\n    >\n      {rows.map((row, index) => (\n        <div key={index} ref={c => setRefs(refs.set(index, c))}>\n          {children(row)}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InfiniteList;\n","const MOCK_DATA = (offset, limit) => [\n  { name: \"Offset \" + offset + \", limit \" + limit },\n  { name: \"Offset \" + offset + \", limit \" + limit },\n  { name: \"Offset \" + offset + \", limit \" + limit },\n  { name: \"Offset \" + offset + \", limit \" + limit },\n  { name: \"Offset \" + offset + \", limit \" + limit },\n  { name: \"Offset \" + offset + \", limit \" + limit },\n];\n\nexport const mock_fetch = (offset, limit) => {\n  return Promise.resolve(MOCK_DATA(offset, limit));\n};\n\nexport default mock_fetch;\n","import React, { useState } from \"react\";\nimport InfiniteList from \"./InfiniteList\";\nimport mock_fetch from \"./mock_data\";\n\nconst App = props => {\n  const [rows, setRows] = useState([]);\n\n  const fetchData = (offset, limit) =>\n    mock_fetch(offset, limit).then(data => {\n      setRows([...rows, ...data]);\n    });\n\n  return (\n    <InfiniteList rows={rows} fetchData={fetchData} limit={10}>\n      {row => <div>\n        {row.name}\n      </div>}\n    </InfiniteList>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}